// Code generated by MockGen. DO NOT EDIT.
// Source: services/src/services/item.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	reflect "reflect"

	gormmodel "github.com/genpsp/go-app/domain/entities"
	request "github.com/genpsp/go-app/services/src/handler/request"
	gomock "github.com/golang/mock/gomock"
)

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemService) Create(itemEntity *gormmodel.Item, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", itemEntity, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemServiceMockRecorder) Create(itemEntity, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemService)(nil).Create), itemEntity, password)
}

// Delete mocks base method.
func (m *MockItemService) Delete(itemID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemServiceMockRecorder) Delete(itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemService)(nil).Delete), itemID)
}

// Find mocks base method.
func (m *MockItemService) Find(gar *request.GetItemRequest) (*[]gormmodel.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", gar)
	ret0, _ := ret[0].(*[]gormmodel.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockItemServiceMockRecorder) Find(gar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockItemService)(nil).Find), gar)
}

// FindAll mocks base method.
func (m *MockItemService) FindAll() (*[]gormmodel.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]gormmodel.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockItemServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockItemService)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockItemService) FindByID(itemID int) (*gormmodel.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", itemID)
	ret0, _ := ret[0].(*gormmodel.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemServiceMockRecorder) FindByID(itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemService)(nil).FindByID), itemID)
}

// Update mocks base method.
func (m *MockItemService) Update(itemID int, itemEntity *gormmodel.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", itemID, itemEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemServiceMockRecorder) Update(itemID, itemEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemService)(nil).Update), itemID, itemEntity)
}
