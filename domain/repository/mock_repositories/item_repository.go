// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/item_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gormmodel "github.com/genpsp/go-app/domain/entities"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemRepository) Create(db *gorm.DB, itemEntity *gormmodel.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, itemEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockItemRepositoryMockRecorder) Create(db, itemEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemRepository)(nil).Create), db, itemEntity)
}

// Delete mocks base method.
func (m *MockItemRepository) Delete(db *gorm.DB, itemID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemRepositoryMockRecorder) Delete(db, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemRepository)(nil).Delete), db, itemID)
}

// FindAll mocks base method.
func (m *MockItemRepository) FindAll(db *gorm.DB) (*[]gormmodel.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", db)
	ret0, _ := ret[0].(*[]gormmodel.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockItemRepositoryMockRecorder) FindAll(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockItemRepository)(nil).FindAll), db)
}

// FindByID mocks base method.
func (m *MockItemRepository) FindByID(db *gorm.DB, itemID int) (*gormmodel.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", db, itemID)
	ret0, _ := ret[0].(*gormmodel.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemRepositoryMockRecorder) FindByID(db, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemRepository)(nil).FindByID), db, itemID)
}

// Update mocks base method.
func (m *MockItemRepository) Update(db *gorm.DB, itemID int, itemEntity *gormmodel.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, itemID, itemEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockItemRepositoryMockRecorder) Update(db, itemID, itemEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemRepository)(nil).Update), db, itemID, itemEntity)
}
